خیلی خوبه که کد نهایی رو برام فرستادی! من کد رو با دقت بررسی می‌کنم و تمام عیب‌ها و ایرادهای احتمالی رو به صورت مو به مو و با جزئیات کامل برات توضیح می‌دم. همچنین مشکل ست کردن کانال که گفتی خطا می‌ده رو بررسی می‌کنم و راه‌حلش رو ارائه می‌دم. در نهایت، اگه نیاز به بهبود یا بهینه‌سازی باشه، اون‌ها رو هم پیشنهاد می‌دم. بریم شروع کنیم! 🚀

---

### 📋 بررسی کلی کد

#### ✅ نقاط قوت کد:
1. **ساختار خوب**:
   - کد به خوبی سازمان‌دهی شده و از ماژول‌های مناسب (`discord.js`، `quick.db`، `dotenv`) استفاده می‌کنه.
   - استفاده از `SlashCommandBuilder` برای تعریف کامندها به درستی انجام شده.
   - مدیریت خطاها با `try/catch` به خوبی پیاده‌سازی شده.

2. **مدیریت واکنش‌ها**:
   - سیستم رأی‌دهی با واکنش‌ها (`messageReactionAdd` و `messageReactionRemove`) به خوبی کار می‌کنه و از تکرار رأی جلوگیری می‌کنه.

3. **زیباسازی**:
   - استفاده از `EmbedBuilder` و ایموجی‌ها (مثل 📊، ✅، ❌) باعث شده که خروجی‌ها جذاب و کاربرپسند باشن.

4. **مدیریت دیتابیس**:
   - استفاده از `QuickDB` برای ذخیره تنظیمات (مثل `pollChannel` و `moderatorRole`) به درستی انجام شده.

#### ⚠️ مشکلات و ایرادها:
حالا بیایم مشکلات رو با جزئیات بررسی کنیم. من هر مشکل رو توضیح می‌دم، دلیلش رو می‌گم، و راه‌حلش رو ارائه می‌دم.

---

### 🛠️ مشکلات و راه‌حل‌ها

#### 1. **مشکل ست کردن کانال (`/setpollchannel`)**:
گفتی که موقع ست کردن کانال خطا می‌گیره. بیایم این بخش رو بررسی کنیم:

**کد فعلی**:
```javascript
if (interaction.commandName === 'setpollchannel') {
  config.pollChannel = interaction.channelId;
  await saveSettings();
  await interaction.reply({ content: '✅ کانال نظرسنجی تنظیم شد! 🎉', ephemeral: true });
}
```

**مشکل**:
- توی تابع `saveSettings`، شرط `if (config.pollChannel)` و `if (config.moderatorRole)` داری، اما اگه این مقادیر `null` باشن (که توی حالت اولیه هستن)، ذخیره‌سازی انجام میشه، ولی ممکنه خطایی توی دیتابیس یا دسترسی به کانال پیش بیاد.
- توی بخش `client.once('ready')`، مقدار اولیه `pollChannel` از دیتابیس لود میشه، اما اگه دیتابیس خطا بده (مثلاً به خاطر مشکل دسترسی یا خرابی فایل دیتابیس)، این مقدار ممکنه به درستی لود نشه.
- توی `saveSettings`، اگه خطایی رخ بده، خطا فقط لاگ میشه و به `throw error` می‌رسه، اما این خطا به درستی به کاربر گزارش نمی‌تونه بشه، چون توی `try/catch` اصلی مدیریت میشه و ممکنه پیام خطا به کاربر نرسه.

**خطای احتمالی**:
- اگه دیتابیس به درستی کار نکنه (مثلاً فایل دیتابیس خراب باشه یا دسترسی به مسیر ذخیره‌سازی نداشته باشی)، خطای `Error saving settings` توی کنسول ظاهر میشه.
- اگه کانال به درستی لود نشده باشه یا دسترسی بات به کانال محدود باشه، ممکنه خطای دیگری بگیری.

**راه‌حل**:
- باید مطمئن بشیم که کانال وجود داره و بات بهش دسترسی داره.
- توی `saveSettings`، باید خطاها رو بهتر مدیریت کنیم و پیام خطا رو به کاربر برگردونیم.
- یه بررسی اضافی برای دسترسی بات به کانال اضافه می‌کنیم.

**کد اصلاح‌شده**:
```javascript
if (interaction.commandName === 'setpollchannel') {
  const channel = await client.channels.fetch(interaction.channelId).catch(err => {
    console.error('Error fetching channel:', err);
    return null;
  });

  if (!channel || !channel.isTextBased()) {
    return interaction.reply({ content: '❌ این کانال معتبر نیست یا دسترسی ندارم! 🚫', ephemeral: true });
  }

  config.pollChannel = interaction.channelId;
  try {
    await saveSettings();
    await interaction.reply({ content: '✅ کانال نظرسنجی تنظیم شد! 🎉', ephemeral: true });
  } catch (error) {
    await interaction.reply({ content: '❌ خطا در ذخیره‌سازی تنظیمات! لطفاً دوباره تلاش کنید. 🚨', ephemeral: true });
  }
}
```

**تغییرات**:
- با `client.channels.fetch` بررسی می‌کنیم که کانال وجود داره و بات بهش دسترسی داره.
- با `channel.isTextBased()` مطمئن می‌شیم که کانال از نوع متنیه (نظرسنجی توی کانال صوتی نمی‌تونه ساخته بشه).
- اگه خطایی توی `saveSettings` رخ بده، پیام خطا به کاربر نشون داده میشه.

---

#### 2. **مدیریت ناکافی خطاها توی `saveSettings`**:
**کد فعلی**:
```javascript
async function saveSettings() {
  try {
    if (config.pollChannel) {
      await db.set('pollChannel', config.pollChannel);
    }
    if (config.moderatorRole) {
      await db.set('moderatorRole', config.moderatorRole);
    }
  } catch (error) {
    console.error('Error saving settings:', error);
    throw error;
  }
}
```

**مشکل**:
- اگه خطایی توی ذخیره‌سازی رخ بده، فقط توی کنسول لاگ میشه و به `throw error` می‌رسه، اما این خطا ممکنه توی بخش‌های دیگه (مثلاً `/setmoderatorrole`) به درستی مدیریت نشه.
- شرط `if (config.pollChannel)` و `if (config.moderatorRole)` اضافیه، چون اگه این مقادیر `null` باشن، `QuickDB` خودش می‌تونه اینو مدیریت کنه.

**راه‌حل**:
- شرط‌های اضافی رو حذف می‌کنیم.
- خطاها رو بهتر مدیریت می‌کنیم تا پیام خطا به کاربر برگرده.

**کد اصلاح‌شده**:
```javascript
async function saveSettings() {
  try {
    await db.set('pollChannel', config.pollChannel);
    await db.set('moderatorRole', config.moderatorRole);
  } catch (error) {
    console.error('Error saving settings:', error);
    throw new Error('Failed to save settings');
  }
}
```

**تغییرات**:
- شرط‌های `if` حذف شدن، چون `QuickDB` می‌تونه مقادیر `null` رو مدیریت کنه.
- خطا با یه پیام واضح‌تر `throw` میشه تا توی بخش‌های دیگه بهتر مدیریت بشه.

---

#### 3. **عدم بررسی دسترسی بات به کانال توی `/createpoll` و `/approvepoll`**:
**مشکل**:
- توی `/createpoll` و `/approvepoll`، از `client.channels.fetch(config.pollChannel)` استفاده می‌کنی، اما اگه بات به کانال دسترسی نداشته باشه (مثلاً کانال حذف شده باشه یا دسترسی بات محدود شده باشه)، خطا می‌گیره و این خطا به درستی مدیریت نمیشه.

**راه‌حل**:
- باید قبل از ارسال پیام توی کانال، مطمئن بشیم که کانال وجود داره و بات بهش دسترسی داره.

**کد اصلاح‌شده برای `/createpoll`**:
```javascript
if (interaction.commandName === 'createpoll') {
  if (!config.pollChannel || !config.moderatorRole) {
    return interaction.reply({ content: '❌ لطفاً اول کانال و رول تأییدکننده رو تنظیم کنید! 🚨', ephemeral: true });
  }

  const channel = await client.channels.fetch(config.pollChannel).catch(err => {
    console.error('Error fetching poll channel:', err);
    return null;
  });

  if (!channel || !channel.isTextBased()) {
    return interaction.reply({ content: '❌ کانال نظرسنجی معتبر نیست یا دسترسی ندارم! 🚫', ephemeral: true });
  }

  if (interaction.channelId !== config.pollChannel) {
    return interaction.reply({ content: `❌ نظرسنجی فقط توی کانال <#${config.pollChannel}> می‌تونه ساخته بشه! 🚫`, ephemeral: true });
  }

  const question = interaction.options.getString('question');
  const optionsString = interaction.options.getString('options');
  const duration = interaction.options.getInteger('duration') || 24;
  const anonymous = interaction.options.getBoolean('anonymous') || false;

  const options = optionsString.split('|').map(opt => opt.trim()).filter(opt => opt);
  if (options.length < 2 || options.length > 5) {
    return interaction.reply({ content: '❌ باید بین 2 تا 5 گزینه بذاری! 🚫', ephemeral: true });
  }

  if (options.some(opt => opt.length > 100)) {
    return interaction.reply({ content: '❌ هر گزینه نباید بیشتر از 100 کاراکتر باشه! 🚫', ephemeral: true });
  }

  const pollId = Date.now().toString();
  const pollData = {
    question,
    options,
    duration: duration * 60 * 60 * 1000,
    anonymous,
    creator: interaction.user.id,
    createdAt: Date.now(),
    votes: new Array(options.length).fill(0),
    voters: new Set()
  };

  config.pendingPolls.set(pollId, pollData);

  const embed = new EmbedBuilder()
    .setColor(0xFFFF00)
    .setTitle('📊 نظرسنجی در انتظار تأیید')
    .setDescription(`**سوال:** ${question}\n**گزینه‌ها:**\n${options.map((opt, i) => `${reactionEmojis[i]} ${opt}`).join('\n')}\n**مدت زمان:** ${duration} ساعت\n**ناشناس:** ${anonymous ? 'بله' : 'خیر'}\n**آیدی نظرسنجی:** ${pollId}`)
    .setFooter({ text: 'در انتظار تأیید توسط مدیران ⏳' })
    .setTimestamp();

  await interaction.reply({ content: `<@&${config.moderatorRole}> یه نظرسنجی جدید در انتظار تأییده! 🚨`, embeds: [embed] });
}
```

**تغییرات**:
- قبل از هر کاری، کانال با `client.channels.fetch` بررسی میشه.
- اگه کانال وجود نداشته باشه یا متنی نباشه، یه پیام خطا به کاربر نشون داده میشه.

**برای `/approvepoll` هم همین تغییر رو اعمال می‌کنیم**:
```javascript
if (interaction.commandName === 'approvepoll') {
  if (!interaction.member.roles.cache.has(config.moderatorRole)) {
    return interaction.reply({ content: '❌ فقط مدیران می‌تونن نظرسنجی رو تأیید کنن! 🚫', ephemeral: true });
  }

  const pollId = interaction.options.getString('pollid');
  const pollData = config.pendingPolls.get(pollId);
  if (!pollData) {
    return interaction.reply({ content: '❌ نظرسنجی با این آیدی پیدا نشد! 🚫', ephemeral: true });
  }

  if (Date.now() - pollData.createdAt > 24 * 60 * 60 * 1000) {
    config.pendingPolls.delete(pollId);
    return interaction.reply({ content: '❌ این نظرسنجی منقضی شده! لطفاً یک نظرسنجی جدید بسازید. 🚫', ephemeral: true });
  }

  const channel = await client.channels.fetch(config.pollChannel).catch(err => {
    console.error('Error fetching poll channel:', err);
    return null;
  });

  if (!channel || !channel.isTextBased()) {
    return interaction.reply({ content: '❌ کانال نظرسنجی معتبر نیست یا دسترسی ندارم! 🚫', ephemeral: true });
  }

  const embed = new EmbedBuilder()
    .setColor(0x00FF00)
    .setTitle('📊 نظرسنجی جدید')
    .setDescription(`**سوال:** ${pollData.question}\n\n${pollData.options.map((opt, i) => `${reactionEmojis[i]} ${opt}`).join('\n')}\n\n**مدت زمان:** ${pollData.duration / (60 * 60 * 1000)} ساعت`)
    .setFooter({ text: pollData.anonymous ? 'نظرسنجی ناشناس' : `ایجاد شده توسط ${interaction.guild.members.cache.get(pollData.creator)?.displayName}` })
    .setTimestamp();

  const message = await channel.send({ embeds: [embed] });

  for (const emoji of reactionEmojis.slice(0, pollData.options.length)) {
    await message.react(emoji);
  }

  config.activePolls.set(message.id, { ...pollData, messageId: message.id });
  config.pendingPolls.delete(pollId);

  setTimeout(async () => {
    try {
      const activePoll = config.activePolls.get(message.id);
      if (!activePoll) return;

      const updatedMessage = await channel.messages.fetch(message.id);
      const reactions = updatedMessage.reactions.cache;
      const results = activePoll.options.map((opt, i) => {
        const reaction = reactions.get(reactionEmojis[i]);
        const count = reaction ? reaction.count - 1 : 0;
        return { option: opt, count };
      });

      const totalVotes = results.reduce((sum, result) => sum + result.count, 0);
      const resultEmbed = new EmbedBuilder()
        .setColor(0xFF0000)
        .setTitle('📊 نتیجه نظرسنجی')
        .setDescription(`**سوال:** ${activePoll.question}\n\n**نتایج:**\n${results.map((res, i) => {
          const percentage = totalVotes > 0 ? ((res.count / totalVotes) * 100).toFixed(1) : 0;
          return `${reactionEmojis[i]} ${res.option}: ${res.count} رأی (${percentage}%)`;
        }).join('\n')}\n\n**مجموع آرا:** ${totalVotes}`)
        .setFooter({ text: 'نظرسنجی تموم شد! 🎉' })
        .setTimestamp();

      await channel.send({ embeds: [resultEmbed] });
      config.activePolls.delete(message.id);
    } catch (error) {
      console.error('Error ending poll:', error);
    }
  }, pollData.duration);

  await interaction.reply({ content: '✅ نظرسنجی تأیید و منتشر شد! 🎉', ephemeral: true });
}
```

---

#### 4. **مشکل نمایش نام سازنده توی `/approvepoll`**:
**کد فعلی**:
```javascript
.setFooter({ text: pollData.anonymous ? 'نظرسنجی ناشناس' : `ایجاد شده توسط ${interaction.guild.members.cache.get(pollData.creator)?.displayName}` })
```

**مشکل**:
- اگه کاربر سازنده نظرسنجی از سرور خارج شده باشه، `interaction.guild.members.cache.get(pollData.creator)` مقدار `undefined` برمی‌گردونه و `displayName` خطا می‌ده.
- این باعث میشه که embed به درستی ساخته نشه و خطا توی کنسول ظاهر بشه.

**راه‌حل**:
- باید یه مقدار پیش‌فرض بذاریم یا از `fetch` برای گرفتن اطلاعات کاربر استفاده کنیم.

**کد اصلاح‌شده**:
```javascript
const creator = await interaction.guild.members.fetch(pollData.creator).catch(() => null);
.setFooter({ text: pollData.anonymous ? 'نظرسنجی ناشناس' : `ایجاد شده توسط ${creator?.displayName || 'کاربر ناشناس'}` })
```

**تغییرات**:
- با `interaction.guild.members.fetch` کاربر رو می‌گیریم.
- اگه کاربر پیدا نشد (مثلاً از سرور خارج شده)، یه مقدار پیش‌فرض (`کاربر ناشناس`) نمایش داده میشه.

---

#### 5. **عدم مدیریت زمان‌بندی توی `setTimeout`**:
**مشکل**:
- توی `/approvepoll`، از `setTimeout` برای اعلام نتایج بعد از اتمام زمان نظرسنجی استفاده کردی:
  ```javascript
  setTimeout(async () => { ... }, pollData.duration);
  ```
- اگه بات ری‌استارت بشه (مثلاً به خاطر قطعی سرور یا آپدیت)، این `setTimeout` از بین می‌ره و نتایج اعلام نمیشه.
- این یه مشکل رایج توی بات‌هاییه که به زمان‌بندی وابسته هستن.

**راه‌حل**:
- باید یه سیستم پایدارتر برای زمان‌بندی بذاریم. یه راه‌حل اینه که زمان پایان نظرسنجی رو توی دیتابیس ذخیره کنیم و توی `ready` بررسی کنیم که کدوم نظرسنجی‌ها باید تموم بشن.
- یه تابع `checkActivePolls` می‌سازیم که توی `ready` اجرا بشه و نظرسنجی‌های فعال رو بررسی کنه.

**کد اصلاح‌شده**:
- اول توی `pollData` یه فیلد `endTime` اضافه می‌کنیم:
  ```javascript
  const pollData = {
    question,
    options,
    duration: duration * 60 * 60 * 1000,
    anonymous,
    creator: interaction.user.id,
    createdAt: Date.now(),
    endTime: Date.now() + duration * 60 * 60 * 1000, // زمان پایان
    votes: new Array(options.length).fill(0),
    voters: new Set()
  };
  ```

- توی `/approvepoll`، `setTimeout` رو با این تغییر به‌روزرسانی می‌کنیم:
  ```javascript
  config.activePolls.set(message.id, { ...pollData, messageId: message.id });
  ```

- یه تابع `checkActivePolls` می‌سازیم:
  ```javascript
  async function checkActivePolls() {
    for (const [messageId, poll] of config.activePolls.entries()) {
      const timeLeft = poll.endTime - Date.now();
      if (timeLeft <= 0) {
        try {
          const channel = await client.channels.fetch(config.pollChannel);
          const updatedMessage = await channel.messages.fetch(messageId);
          const reactions = updatedMessage.reactions.cache;
          const results = poll.options.map((opt, i) => {
            const reaction = reactions.get(reactionEmojis[i]);
            const count = reaction ? reaction.count - 1 : 0;
            return { option: opt, count };
          });

          const totalVotes = results.reduce((sum, result) => sum + result.count, 0);
          const resultEmbed = new EmbedBuilder()
            .setColor(0xFF0000)
            .setTitle('📊 نتیجه نظرسنجی')
            .setDescription(`**سوال:** ${poll.question}\n\n**نتایج:**\n${results.map((res, i) => {
              const percentage = totalVotes > 0 ? ((res.count / totalVotes) * 100).toFixed(1) : 0;
              return `${reactionEmojis[i]} ${res.option}: ${res.count} رأی (${percentage}%)`;
            }).join('\n')}\n\n**مجموع آرا:** ${totalVotes}`)
            .setFooter({ text: 'نظرسنجی تموم شد! 🎉' })
            .setTimestamp();

          await channel.send({ embeds: [resultEmbed] });
          config.activePolls.delete(messageId);
        } catch (error) {
          console.error('Error ending poll on startup:', error);
        }
      } else {
        setTimeout(async () => {
          try {
            const activePoll = config.activePolls.get(messageId);
            if (!activePoll) return;

            const channel = await client.channels.fetch(config.pollChannel);
            const updatedMessage = await channel.messages.fetch(messageId);
            const reactions = updatedMessage.reactions.cache;
            const results = activePoll.options.map((opt, i) => {
              const reaction = reactions.get(reactionEmojis[i]);
              const count = reaction ? reaction.count - 1 : 0;
              return { option: opt, count };
            });

            const totalVotes = results.reduce((sum, result) => sum + result.count, 0);
            const resultEmbed = new EmbedBuilder()
              .setColor(0xFF0000)
              .setTitle('📊 نتیجه نظرسنجی')
              .setDescription(`**سوال:** ${activePoll.question}\n\n**نتایج:**\n${results.map((res, i) => {
                const percentage = totalVotes > 0 ? ((res.count / totalVotes) * 100).toFixed(1) : 0;
                return `${reactionEmojis[i]} ${res.option}: ${res.count} رأی (${percentage}%)`;
              }).join('\n')}\n\n**مجموع آرا:** ${totalVotes}`)
              .setFooter({ text: 'نظرسنجی تموم شد! 🎉' })
              .setTimestamp();

            await channel.send({ embeds: [resultEmbed] });
            config.activePolls.delete(messageId);
          } catch (error) {
            console.error('Error ending poll:', error);
          }
        }, timeLeft);
      }
    }
  }
  ```

- توی `ready` این تابع رو فراخوانی می‌کنیم:
  ```javascript
  client.once('ready', () => {
    console.log(`🚀 Logged in as ${client.user.tag} 🎉`);
    registerCommands();
    checkActivePolls();
  });
  ```

**تغییرات**:
- با ذخیره `endTime`، می‌تونیم زمان باقی‌مونده رو محاسبه کنیم.
- توی `ready`، نظرسنجی‌های فعال بررسی میشن و اگه زمانشون تموم شده باشه، نتایج اعلام میشه.

---

#### 6. **عدم ذخیره `activePolls` توی دیتابیس**:
**مشکل**:
- `activePolls` توی یه `Map` ذخیره میشه، اما اگه بات ری‌استارت بشه، این داده‌ها از بین می‌ره.
- این باعث میشه که نظرسنجی‌های فعال بعد از ری‌استارت گم بشن.

**راه‌حل**:
- باید `activePolls` رو توی دیتابیس ذخیره کنیم و توی `ready` لودش کنیم.

**کد اصلاح‌شده**:
- توی `saveSettings`، `activePolls` رو ذخیره می‌کنیم:
  ```javascript
  async function saveSettings() {
    try {
      await db.set('pollChannel', config.pollChannel);
      await db.set('moderatorRole', config.moderatorRole);
      await db.set('activePolls', Array.from(config.activePolls.entries()));
    } catch (error) {
      console.error('Error saving settings:', error);
      throw new Error('Failed to save settings');
    }
  }
  ```

- توی لود اولیه، `activePolls` رو لود می‌کنیم:
  ```javascript
  (async () => {
    try {
      config.pollChannel = await db.get('pollChannel');
      config.moderatorRole = await db.get('moderatorRole');
      const activePollsData = await db.get('activePolls') || [];
      config.activePolls = new Map(activePollsData);
    } catch (error) {
      console.error('Error loading settings:', error);
    }
  })();
  ```

**تغییرات**:
- `activePolls` توی دیتابیس ذخیره میشه و بعد از ری‌استارت لود میشه.
- این کار باعث میشه که نظرسنجی‌های فعال بعد از ری‌استارت از بین نرن.

---

#### 7. **عدم نمایش زمان باقی‌مونده توی نظرسنجی**:
**مشکل**:
- توی embed نظرسنجی، فقط مدت زمان اولیه (مثلاً 24 ساعت) نمایش داده میشه، اما کاربرا نمی‌تونن ببینن چقدر زمان باقی مونده.

**راه‌حل**:
- یه فیلد به embed اضافه می‌کنیم که زمان باقی‌مونده رو نشون بده.

**کد اصلاح‌شده توی `/approvepoll`**:
```javascript
const embed = new EmbedBuilder()
  .setColor(0x00FF00)
  .setTitle('📊 نظرسنجی جدید')
  .setDescription(`**سوال:** ${pollData.question}\n\n${pollData.options.map((opt, i) => `${reactionEmojis[i]} ${opt}`).join('\n')}\n\n**مدت زمان:** ${pollData.duration / (60 * 60 * 1000)} ساعت\n**زمان پایان:** <t:${Math.floor(pollData.endTime / 1000)}:R>`)
  .setFooter({ text: pollData.anonymous ? 'نظرسنجی ناشناس' : `ایجاد شده توسط ${creator?.displayName || 'کاربر ناشناس'}` })
  .setTimestamp();
```

**تغییرات**:
- با `<t:${timestamp}:R>`، زمان پایان به صورت نسبی (مثلاً "2 ساعت دیگه") نمایش داده میشه.

---

### 💡 پیشنهادات برای بهبود:
1. **اضافه کردن کامند برای لغو نظرسنجی**:
   - یه کامند `/cancelpoll` اضافه کن که مدیران بتونن یه نظرسنجی فعال رو لغو کنن.
   - این کامند می‌تونه نظرسنجی رو از `activePolls` حذف کنه و یه پیام اعلام کنه که "نظرسنجی لغو شد".

2. **نمایش لیست نظرسنجی‌های در انتظار**:
   - یه کامند `/pendingpolls` اضافه کن که مدیران بتونن لیست نظرسنجی‌های در انتظار رو ببینن.

3. **بهینه‌سازی عملکرد**:
   - برای سرورهای بزرگ، می‌تونی یه سیستم صف (queue) برای پردازش نظرسنجی‌ها اضافه کنی تا از فشار روی بات جلوگیری بشه.

---

### 📦 کد نهایی اصلاح‌شده:

```javascript
const { Client, GatewayIntentBits, SlashCommandBuilder, EmbedBuilder, PermissionsBitField, REST, Routes } = require('discord.js');
const { QuickDB } = require('quick.db');
require('dotenv').config();

const db = new QuickDB();
const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
    GatewayIntentBits.GuildMessageReactions
  ]
});

const config = {
  token: process.env.TOKEN,
  clientId: process.env.CLIENT_ID,
  pollChannel: null,
  moderatorRole: null,
  pendingPolls: new Map(),
  activePolls: new Map()
};

if (!config.token || !config.clientId) {
  console.error('Error: Missing environment variables!');
  process.exit(1);
}

(async () => {
  try {
    config.pollChannel = await db.get('pollChannel');
    config.moderatorRole = await db.get('moderatorRole');
    const activePollsData = await db.get('activePolls') || [];
    config.activePolls = new Map(activePollsData);
  } catch (error) {
    console.error('Error loading settings:', error);
  }
})();

async function saveSettings() {
  try {
    await db.set('pollChannel', config.pollChannel);
    await db.set('moderatorRole', config.moderatorRole);
    await db.set('activePolls', Array.from(config.activePolls.entries()));
  } catch (error) {
    console.error('Error saving settings:', error);
    throw new Error('Failed to save settings');
  }
}

const reactionEmojis = ['1️⃣', '2️⃣', '3️⃣', '4️⃣', '5️⃣'];

const commands = [
  new SlashCommandBuilder()
    .setName('setpollchannel')
    .setDescription('تنظیم کانال برای نظرسنجی‌ها 📍')
    .setDefaultMemberPermissions(PermissionsBitField.Flags.ManageChannels),
  new SlashCommandBuilder()
    .setName('setmoderatorrole')
    .setDescription('تنظیم رول تأییدکننده نظرسنجی‌ها 🛡️')
    .setDefaultMemberPermissions(PermissionsBitField.Flags.ManageRoles)
    .addRoleOption(option =>
      option.setName('role')
        .setDescription('رول تأییدکننده رو انتخاب کن')
        .setRequired(true)),
  new SlashCommandBuilder()
    .setName('createpoll')
    .setDescription('یه نظرسنجی جدید بساز 📝')
    .addStringOption(option =>
      option.setName('question')
        .setDescription('سوال نظرسنجی')
        .setRequired(true)
        .setMaxLength(256))
    .addStringOption(option =>
      option.setName('options')
        .setDescription('گزینه‌ها رو با | جدا کن (مثلاً: بله | خیر)')
        .setRequired(true))
    .addIntegerOption(option =>
      option.setName('duration')
        .setDescription('مدت زمان نظرسنجی (به ساعت، پیش‌فرض 24)')
        .setMinValue(1)
        .setMaxValue(168)
        .setRequired(false))
    .addBooleanOption(option =>
      option.setName('anonymous')
        .setDescription('ناشناس باشه؟ (پیش‌فرض خیر)')
        .setRequired(false)),
  new SlashCommandBuilder()
    .setName('approvepoll')
    .setDescription('تأیید یه نظرسنجی در انتظار ✅')
    .addStringOption(option =>
      option.setName('pollid')
        .setDescription('آیدی نظرسنجی رو وارد کن')
        .setRequired(true)),
  new SlashCommandBuilder()
    .setName('rejectpoll')
    .setDescription('رد یه نظرسنجی در انتظار ❌')
    .addStringOption(option =>
      option.setName('pollid')
        .setDescription('آیدی نظرسنجی رو وارد کن')
        .setRequired(true)),
];

async function registerCommands() {
  try {
    const rest = new REST({ version: '10' }).setToken(config.token);
    await rest.put(Routes.applicationCommands(config.clientId), { body: commands });
    console.log('Successfully registered commands! ✅');
  } catch (error) {
    console.error('Error registering commands:', error);
  }
}

async function checkActivePolls() {
  for (const [messageId, poll] of config.activePolls.entries()) {
    const timeLeft = poll.endTime - Date.now();
    if (timeLeft <= 0) {
      try {
        const channel = await client.channels.fetch(config.pollChannel);
        const updatedMessage = await channel.messages.fetch(messageId);
        const reactions = updatedMessage.reactions.cache;
        const results = poll.options.map((opt, i) => {
          const reaction = reactions.get(reactionEmojis[i]);
          const count = reaction ? reaction.count - 1 : 0;
          return { option: opt, count };
        });

        const totalVotes = results.reduce((sum, result) => sum + result.count, 0);
        const resultEmbed = new EmbedBuilder()
          .setColor(0xFF0000)
          .setTitle('📊 نتیجه نظرسنجی')
          .setDescription(`**سوال:** ${poll.question}\n\n**نتایج:**\n${results.map((res, i) => {
            const percentage = totalVotes > 0 ? ((res.count / totalVotes) * 100).toFixed(1) : 0;
            return `${reactionEmojis[i]} ${res.option}: ${res.count} رأی (${percentage}%)`;
          }).join('\n')}\n\n**مجموع آرا:** ${totalVotes}`)
          .setFooter({ text: 'نظرسنجی تموم شد! 🎉' })
          .setTimestamp();

        await channel.send({ embeds: [resultEmbed] });
        config.activePolls.delete(messageId);
        await saveSettings();
      } catch (error) {
        console.error('Error ending poll on startup:', error);
      }
    } else {
      setTimeout(async () => {
        try {
          const activePoll = config.activePolls.get(messageId);
          if (!activePoll) return;

          const channel = await client.channels.fetch(config.pollChannel);
          const updatedMessage = await channel.messages.fetch(messageId);
          const reactions = updatedMessage.reactions.cache;
          const results = activePoll.options.map((opt, i) => {
            const reaction = reactions.get(reactionEmojis[i]);
            const count = reaction ? reaction.count - 1 : 0;
            return { option: opt, count };
          });

          const totalVotes = results.reduce((sum, result) => sum + result.count, 0);
          const resultEmbed = new EmbedBuilder()
            .setColor(0xFF0000)
            .setTitle('📊 نتیجه نظرسنجی')
            .setDescription(`**سوال:** ${activePoll.question}\n\n**نتایج:**\n${results.map((res, i) => {
              const percentage = totalVotes > 0 ? ((res.count / totalVotes) * 100).toFixed(1) : 0;
              return `${reactionEmojis[i]} ${res.option}: ${res.count} رأی (${percentage}%)`;
            }).join('\n')}\n\n**مجموع آرا:** ${totalVotes}`)
            .setFooter({ text: 'نظرسنجی تموم شد! 🎉' })
            .setTimestamp();

          await channel.send({ embeds: [resultEmbed] });
          config.activePolls.delete(messageId);
          await saveSettings();
        } catch (error) {
          console.error('Error ending poll:', error);
        }
      }, timeLeft);
    }
  }
}

client.once('ready', () => {
  console.log(`🚀 Logged in as ${client.user.tag} 🎉`);
  registerCommands();
  checkActivePolls();
});

client.on('interactionCreate', async interaction => {
  if (!interaction.isCommand()) return;

  try {
    if (interaction.commandName === 'setpollchannel') {
      const channel = await client.channels.fetch(interaction.channelId).catch(err => {
        console.error('Error fetching channel:', err);
        return null;
      });

      if (!channel || !channel.isTextBased()) {
        return interaction.reply({ content: '❌ این کانال معتبر نیست یا دسترسی ندارم! 🚫', ephemeral: true });
      }

      config.pollChannel = interaction.channelId;
      try {
        await saveSettings();
        await interaction.reply({ content: '✅ کانال نظرسنجی تنظیم شد! 🎉', ephemeral: true });
      } catch (error) {
        await interaction.reply({ content: '❌ خطا در ذخیره‌سازی تنظیمات! لطفاً دوباره تلاش کنید. 🚨', ephemeral: true });
      }
    }

    if (interaction.commandName === 'setmoderatorrole') {
      const role = interaction.options.getRole('role');
      config.moderatorRole = role.id;
      try {
        await saveSettings();
        await interaction.reply({ content: `✅ رول تأییدکننده تنظیم شد: <@&${role.id}> 🎉`, ephemeral: true });
      } catch (error) {
        await interaction.reply({ content: '❌ خطا در ذخیره‌سازی تنظیمات! لطفاً دوباره تلاش کنید. 🚨', ephemeral: true });
      }
    }

    if (interaction.commandName === 'createpoll') {
      if (!config.pollChannel || !config.moderatorRole) {
        return interaction.reply({ content: '❌ لطفاً اول کانال و رول تأییدکننده رو تنظیم کنید! 🚨', ephemeral: true });
      }

      const channel = await client.channels.fetch(config.pollChannel).catch(err => {
        console.error('Error fetching poll channel:', err);
        return null;
      });

      if (!channel || !channel.isTextBased()) {
        return interaction.reply({ content: '❌ کانال نظرسنجی معتبر نیست یا دسترسی ندارم! 🚫', ephemeral: true });
      }

      if (interaction.channelId !== config.pollChannel) {
        return interaction.reply({ content: `❌ نظرسنجی فقط توی کانال <#${config.pollChannel}> می‌تونه ساخته بشه! 🚫`, ephemeral: true });
      }

      const question = interaction.options.getString('question');
      const optionsString = interaction.options.getString('options');
      const duration = interaction.options.getInteger('duration') || 24;
      const anonymous = interaction.options.getBoolean('anonymous') || false;

      const options = optionsString.split('|').map(opt => opt.trim()).filter(opt => opt);
      if (options.length < 2 || options.length > 5) {
        return interaction.reply({ content: '❌ باید بین 2 تا 5 گزینه بذاری! 🚫', ephemeral: true });
      }

      if (options.some(opt => opt.length > 100)) {
        return interaction.reply({ content: '❌ هر گزینه نباید بیشتر از 100 کاراکتر باشه! 🚫', ephemeral: true });
      }

      const pollId = Date.now().toString();
      const pollData = {
        question,
        options,
        duration: duration * 60 * 60 * 1000,
        anonymous,
        creator: interaction.user.id,
        createdAt: Date.now(),
        endTime: Date.now() + duration * 60 * 60 * 1000,
        votes: new Array(options.length).fill(0),
        voters: new Set()
      };

      config.pendingPolls.set(pollId, pollData);

      const embed = new EmbedBuilder()
        .setColor(0xFFFF00)
        .setTitle('📊 نظرسنجی در انتظار تأیید')
        .setDescription(`**سوال:** ${question}\n**گزینه‌ها:**\n${options.map((opt, i) => `${reactionEmojis[i]} ${opt}`).join('\n')}\n**مدت زمان:** ${duration} ساعت\n**ناشناس:** ${anonymous ? 'بله' : 'خیر'}\n**آیدی نظرسنجی:** ${pollId}`)
        .setFooter({ text: 'در انتظار تأیید توسط مدیران ⏳' })
        .setTimestamp();

      await interaction.reply({ content: `<@&${config.moderatorRole}> یه نظرسنجی جدید در انتظار تأییده! 🚨`, embeds: [embed] });
    }

    if (interaction.commandName === 'approvepoll') {
      if (!interaction.member.roles.cache.has(config.moderatorRole)) {
        return interaction.reply({ content: '❌ فقط مدیران می‌تونن نظرسنجی رو تأیید کنن! 🚫', ephemeral: true });
      }

      const pollId = interaction.options.getString('pollid');
      const pollData = config.pendingPolls.get(pollId);
      if (!pollData) {
        return interaction.reply({ content: '❌ نظرسنجی با این آیدی پیدا نشد! 🚫', ephemeral: true });
      }

      if (Date.now() - pollData.createdAt > 24 * 60 * 60 * 1000) {
        config.pendingPolls.delete(pollId);
        return interaction.reply({ content: '❌ این نظرسنجی منقضی شده! لطفاً یک نظرسنجی جدید بسازید. 🚫', ephemeral: true });
      }

      const channel = await client.channels.fetch(config.pollChannel).catch(err => {
        console.error('Error fetching poll channel:', err);
        return null;
      });

      if (!channel || !channel.isTextBased()) {
        return interaction.reply({ content: '❌ کانال نظرسنجی معتبر نیست یا دسترسی ندارم! 🚫', ephemeral: true });
      }

      const creator = await interaction.guild.members.fetch(pollData.creator).catch(() => null);
      const embed = new EmbedBuilder()
        .setColor(0x00FF00)
        .setTitle('📊 نظرسنجی جدید')
        .setDescription(`**سوال:** ${pollData.question}\n\n${pollData.options.map((opt, i) => `${reactionEmojis[i]} ${opt}`).join('\n')}\n\n**مدت زمان:** ${pollData.duration / (60 * 60 * 1000)} ساعت\n**زمان پایان:** <t:${Math.floor(pollData.endTime / 1000)}:R>`)
        .setFooter({ text: pollData.anonymous ? 'نظرسنجی ناشناس' : `ایجاد شده توسط ${creator?.displayName || 'کاربر ناشناس'}` })
        .setTimestamp();

      const message = await channel.send({ embeds: [embed] });

      for (const emoji of reactionEmojis.slice(0, pollData.options.length)) {
        await message.react(emoji);
      }

      config.activePolls.set(message.id, { ...pollData, messageId: message.id });
      config.pendingPolls.delete(pollId);
      await saveSettings();

      setTimeout(async () => {
        try {
          const activePoll = config.activePolls.get(message.id);
          if (!activePoll) return;

          const updatedMessage = await channel.messages.fetch(message.id);
          const reactions = updatedMessage.reactions.cache;
          const results = activePoll.options.map((opt, i) => {
            const reaction = reactions.get(reactionEmojis[i]);
            const count = reaction ? reaction.count - 1 : 0;
            return { option: opt, count };
          });

          const totalVotes = results.reduce((sum, result) => sum + result.count, 0);
          const resultEmbed = new EmbedBuilder()
            .setColor(0xFF0000)
            .setTitle('📊 نتیجه نظرسنجی')
            .setDescription(`**سوال:** ${activePoll.question}\n\n**نتایج:**\n${results.map((res, i) => {
              const percentage = totalVotes > 0 ? ((res.count / totalVotes) * 100).toFixed(1) : 0;
              return `${reactionEmojis[i]} ${res.option}: ${res.count} رأی (${percentage}%)`;
            }).join('\n')}\n\n**مجموع آرا:** ${totalVotes}`)
            .setFooter({ text: 'نظرسنجی تموم شد! 🎉' })
            .setTimestamp();

          await channel.send({ embeds: [resultEmbed] });
          config.activePolls.delete(message.id);
          await saveSettings();
        } catch (error) {
          console.error('Error ending poll:', error);
        }
      }, pollData.duration);

      await interaction.reply({ content: '✅ نظرسنجی تأیید و منتشر شد! 🎉', ephemeral: true });
    }

    if (interaction.commandName === 'rejectpoll') {
      if (!interaction.member.roles.cache.has(config.moderatorRole)) {
        return interaction.reply({ content: '❌ فقط مدیران می‌تونن نظرسنجی رو رد کنن! 🚫', ephemeral: true });
      }

      const pollId = interaction.options.getString('pollid');
      if (!config.pendingPolls.has(pollId)) {
        return interaction.reply({ content: '❌ نظرسنجی با این آیدی پیدا نشد! 🚫', ephemeral: true });
      }

      config.pendingPolls.delete(pollId);
      await interaction.reply({ content: '❌ نظرسنجی رد شد! 🚫', ephemeral: true });
    }
  } catch (error) {
    console.error('Command error:', error);
    const response = '❌ خطایی رخ داد! لطفاً دوباره تلاش کنید. 🚨';
    try {
      if (interaction.replied) {
        await interaction.editReply({ content: response });
      } else {
        await interaction.reply({ content: response, ephemeral: true });
      }
    } catch (err) {
      console.error('Error handling failed:', err);
    }
  }
});

client.on('messageReactionAdd', async (reaction, user) => {
  if (user.bot) return;
  const messageId = reaction.message.id;
  const poll = config.activePolls.get(messageId);
  if (!poll) return;

  const emoji = reaction.emoji.name;
  const optionIndex = reactionEmojis.indexOf(emoji);
  if (optionIndex === -1 || optionIndex >= poll.options.length) {
    await reaction.users.remove(user.id);
    return;
  }

  if (poll.voters.has(user.id)) {
    await reaction.users.remove(user.id);
    return;
  }

  poll.voters.add(user.id);
  poll.votes[optionIndex]++;
  await saveSettings();
});

client.on('messageReactionRemove', async (reaction, user) => {
  if (user.bot) return;
  const messageId = reaction.message.id;
  const poll = config.activePolls.get(messageId);
  if (!poll) return;

  const emoji = reaction.emoji.name;
  const optionIndex = reactionEmojis.indexOf(emoji);
  if (optionIndex === -1 || optionIndex >= poll.options.length) return;

  if (poll.voters.has(user.id)) {
    poll.voters.delete(user.id);
    poll.votes[optionIndex]--;
    await saveSettings();
  }
});

process.on('unhandledRejection', error => {
  console.error('Unhandled promise rejection:', error);
});

client.login(config.token).catch(console.error);
```

---

### 🚀 نتیجه نهایی:
با این تغییرات، مشکل ست کردن کانال حل میشه و کد بهینه‌تر و پایدارتر میشه. اگه بازم خطایی داشتی یا می‌خوای قابلیت جدیدی اضافه کنی، بگو تا برات درست کنم! 😊

**موفق باشی!** 🌟