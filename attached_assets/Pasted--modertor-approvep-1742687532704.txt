اها شاید زدن ایدی نظر سنجی توسط هر modertor کار سختیه پس بجای اینکه کامند های جداگانه مثل / approvepoll یا /rejectpoll باشه هر وقت اعضا خواستن poll بزارن و قبلش باید توسط همون رولی که ست کردیم که بیاد اون نظرسنجیو تایید کنه بجا اینکه از این کامند ها استفاده کنه زیر همون پیام که دکمه approve و reject باشه تا با تنها یه کلیک کار انجام بشه و نیازی به کپی پیست کردن ایدی نظرسنجی نباشه


خیلی ایده‌ی خوبی داری! می‌خوای به جای استفاده از کامندهای جداگونه مثل /approvepoll و /rejectpoll که نیاز به کپی کردن آیدی نظرسنجی دارن، دکمه‌های "تأیید" (Approve) و "رد" (Reject) مستقیماً زیر پیام نظرسنجی در انتظار تأیید قرار بگیرن. اینطوری مدیران فقط با یه کلیک می‌تونن نظرسنجی رو تأیید یا رد کنن و نیازی به وارد کردن آیدی نیست. این کار هم تجربه کاربری رو بهتر می‌کنه و هم سرعت عمل مدیران رو بالا می‌بره. 🚀

از اونجایی که قبلاً توی کد دکمه‌ها رو اضافه کرده بودیم، الان فقط باید کامندهای /approvepoll و /rejectpoll رو حذف کنیم و مطمئن بشیم که دکمه‌ها به درستی کار می‌کنن. همچنین باید یه سری بهینه‌سازی انجام بدیم تا همه‌چیز روان‌تر بشه.

📋 تغییرات لازم
1. حذف کامندهای /approvepoll و /rejectpoll
این دو کامند رو از لیست commands حذف می‌کنیم.
منطق تأیید و رد رو کاملاً به دکمه‌ها منتقل می‌کنیم.
2. بهینه‌سازی دکمه‌ها
دکمه‌ها رو توی پیام نظرسنجی در انتظار تأیید داریم، اما باید مطمئن بشیم که فقط مدیران (کسایی که رول moderatorRole رو دارن) بتونن ازشون استفاده کنن.
بعد از کلیک روی دکمه، پیام اصلی (Pending Poll) باید آپدیت بشه و دکمه‌ها غیرفعال بشن.
3. بهبود تجربه کاربری
یه پیام تأیید یا رد به مدیر نشون بدیم که بفهمه عملیاتش با موفقیت انجام شده.
اگه نظرسنجی تأیید بشه، مستقیماً توی کانال نظرسنجی منتشر بشه.
📦 تغییرات در کد
1. حذف /approvepoll و /rejectpoll از لیست کامندها
توی آرایه commands، این دو کامند رو حذف می‌کنیم:

javascript

Collapse

Wrap

Copy
const commands = [
  new SlashCommandBuilder()
    .setName('ping')
    .setDescription('نمایش وضعیت ربات 🏓'),
  new SlashCommandBuilder()
    .setName('setpollchannel')
    .setDescription('تنظیم کانال نظرسنجی 📍')
    .setDefaultMemberPermissions(PermissionsBitField.Flags.ManageChannels),
  new SlashCommandBuilder()
    .setName('setmoderatorrole')
    .setDescription('تنظیم رول تأییدکننده 🛡️')
    .setDefaultMemberPermissions(PermissionsBitField.Flags.ManageRoles)
    .addRoleOption(option =>
      option.setName('role')
        .setDescription('رول تأییدکننده')
        .setRequired(true)),
  new SlashCommandBuilder()
    .setName('createpoll')
    .setDescription('ساخت نظرسنجی جدید 📝')
    .addStringOption(option =>
      option.setName('question')
        .setDescription('سوال نظرسنجی')
        .setRequired(true)
        .setMaxLength(256))
    .addStringOption(option =>
      option.setName('options')
        .setDescription('گزینه‌ها (با | جدا کنید)')
        .setRequired(true))
    .addIntegerOption(option =>
      option.setName('duration')
        .setDescription('مدت زمان (ساعت)')
        .setMinValue(1)
        .setMaxValue(168))
    .addBooleanOption(option =>
      option.setName('anonymous')
        .setDescription('حالت ناشناس')
        .setRequired(false))
];
2. حذف منطق /approvepoll و /rejectpoll از interactionCreate
توی بخش interactionCreate، caseهای مربوط به این دو کامند رو حذف می‌کنیم. منطق تأیید و رد قبلاً توی بخش دکمه‌ها (interaction.isButton()) پیاده‌سازی شده، پس فقط باید مطمئن بشیم که اون بخش به درستی کار می‌کنه.

3. بهینه‌سازی دکمه‌ها
توی /createpoll، دکمه‌ها رو اضافه کردیم. حالا باید مطمئن بشیم که بعد از کلیک روی دکمه‌ها، پیام اصلی آپدیت بشه و دکمه‌ها غیرفعال بشن.
یه پیام تأیید به مدیر نشون بدیم.
بخش /createpoll (ایجاد دکمه‌ها):
این بخش قبلاً درست بود، فقط یه مقدار ظاهر پیام رو بهتر می‌کنیم:

javascript

Collapse

Wrap

Copy
case 'createpoll':
  if (!config.pollChannel || !config.moderatorRole) {
    await interaction.editReply({ content: `${EMOJIS.ERROR} **لطفاً ابتدا کانال و رول را تنظیم کنید**` });
    return;
  }

  const pollId = Date.now().toString();
  const poll = {
    question: interaction.options.getString('question'),
    options: interaction.options.getString('options').split('|').map(o => o.trim()),
    duration: (interaction.options.getInteger('duration') || 24) * 3600000,
    creator: interaction.user.id,
    creatorName: interaction.user.username,
    endTime: Date.now() + ((interaction.options.getInteger('duration') || 24) * 3600000),
    anonymous: interaction.options.getBoolean('anonymous') || false,
    voters: new Map()
  };

  if (poll.options.length < 2 || poll.options.length > 5) {
    await interaction.editReply({ content: `${EMOJIS.ERROR} **نظرسنجی باید بین 2 تا 5 گزینه داشته باشد**` });
    return;
  }

  config.pendingPolls.set(pollId, poll);

  const embed = new EmbedBuilder()
    .setTitle(`${poll.anonymous ? '🔒 ' : ''}📊 نظرسنجی در انتظار تأیید`)
    .setColor(COLORS.PENDING)
    .setDescription('لطفاً این نظرسنجی را بررسی و تأیید یا رد کنید! 🚨')
    .addFields(
      { name: `${EMOJIS.QUESTION} **سوال**`, value: poll.question, inline: false },
      { name: `${EMOJIS.OPTIONS} **گزینه‌ها**`, value: poll.options.map((opt, i) => `${reactionEmojis[i]} ${opt}`).join('\n'), inline: false },
      { name: `${EMOJIS.DURATION} **مدت زمان**`, value: `${poll.duration / 3600000} ساعت`, inline: true },
      { name: `${EMOJIS.ANONYMOUS} **ناشناس**`, value: poll.anonymous ? 'بله ✅' : 'خیر ❌', inline: true },
      { name: `${EMOJIS.ID} **شناسه**`, value: pollId, inline: true }
    )
    .setThumbnail(client.user.displayAvatarURL())
    .setFooter({ text: poll.anonymous ? 'نظرسنجی ناشناس 🔒 | در انتظار تأیید' : `ایجاد شده توسط ${poll.creatorName} | در انتظار تأیید` })
    .setTimestamp();

  const actionRow = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId(`approve_${pollId}`)
        .setLabel('تأیید')
        .setStyle(ButtonStyle.Success)
        .setEmoji('✅'),
      new ButtonBuilder()
        .setCustomId(`reject_${pollId}`)
        .setLabel('رد')
        .setStyle(ButtonStyle.Danger)
        .setEmoji('❌')
    );

  await interaction.editReply({ content: `${EMOJIS.SUCCESS} **نظرسنجی شما ایجاد و در انتظار تأیید است**` });
  const message = await interaction.channel.send({ 
    content: `<@&${config.moderatorRole}> یک نظرسنجی جدید نیاز به تأیید دارد! 🚨`,
    embeds: [embed],
    components: [actionRow]
  });

  for (const emoji of reactionEmojis.slice(0, poll.options.length)) {
    await message.react(emoji);
  }
  break;
بخش دکمه‌ها (interaction.isButton()):
این بخش رو بهینه می‌کنیم تا بعد از کلیک، پیام آپدیت بشه و دکمه‌ها غیرفعال بشن:

javascript

Collapse

Wrap

Copy
} else if (interaction.isButton()) {
  if (!interaction.member.roles.cache.has(config.moderatorRole)) {
    await interaction.reply({ content: `${EMOJIS.ERROR} **شما دسترسی لازم برای این کار را ندارید**`, ephemeral: true });
    return;
  }

  const [action, pollId] = interaction.customId.split('_');
  const poll = config.pendingPolls.get(pollId);
  if (!poll) {
    await interaction.update({ 
      content: `${EMOJIS.ERROR} **نظرسنجی مورد نظر یافت نشد**`, 
      embeds: [], 
      components: [] 
    });
    return;
  }

  if (action === 'approve') {
    const channel = await client.channels.fetch(config.pollChannel);
    const pollEmbed = new EmbedBuilder()
      .setTitle(`${poll.anonymous ? '🔒 ' : ''}📊 نظرسنجی فعال`)
      .setColor(COLORS.ACTIVE)
      .addFields(
        { name: `${EMOJIS.QUESTION} **سوال**`, value: poll.question, inline: false },
        { name: `${EMOJIS.OPTIONS} **گزینه‌ها**`, value: poll.options.map((opt, i) => `${reactionEmojis[i]} ${opt}`).join('\n'), inline: false },
        { name: `${EMOJIS.TIME_REMAINING} **زمان باقیمانده**`, value: `<t:${Math.floor(poll.endTime / 1000)}:R>`, inline: true },
        { name: `${EMOJIS.ANONYMOUS} **ناشناس**`, value: poll.anonymous ? 'بله ✅' : 'خیر ❌', inline: true }
      )
      .setThumbnail(client.user.displayAvatarURL())
      .setFooter({ text: poll.anonymous ? 'نظرسنجی ناشناس 🔒 | فعال' : `ایجاد شده توسط ${poll.creatorName} | فعال` })
      .setTimestamp();

    const msg = await channel.send({ embeds: [pollEmbed] });
    for (const emoji of reactionEmojis.slice(0, poll.options.length)) {
      await msg.react(emoji);
    }

    config.activePolls.set(msg.id, poll);
    config.pendingPolls.delete(pollId);
    await saveSettings();

    const updatedEmbed = new EmbedBuilder()
      .setTitle('✅ نظرسنجی تأیید شد')
      .setColor(COLORS.SUCCESS)
      .setDescription(`این نظرسنجی توسط <@${interaction.user.id}> تأیید شد و در <#${config.pollChannel}> منتشر شد.`)
      .setTimestamp();

    await interaction.update({ 
      content: null, 
      embeds: [updatedEmbed], 
      components: [] 
    });
  } else if (action === 'reject') {
    config.pendingPolls.delete(pollId);
    const updatedEmbed = new EmbedBuilder()
      .setTitle('❌ نظرسنجی رد شد')
      .setColor(COLORS.ERROR)
      .setDescription(`این نظرسنجی توسط <@${interaction.user.id}> رد شد.`)
      .setTimestamp();

    await interaction.update({ 
      content: null, 
      embeds: [updatedEmbed], 
      components: [] 
    });
  }
}
📦 کد نهایی اصلاح‌شده
javascript

Collapse

Wrap

Copy
const { Client, GatewayIntentBits, SlashCommandBuilder, EmbedBuilder, PermissionsBitField, REST, Routes, InteractionResponseFlags, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const { QuickDB } = require('quick.db');
require('dotenv').config();

const db = new QuickDB();
const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
    GatewayIntentBits.GuildMessageReactions,
    GatewayIntentBits.GuildMembers
  ]
});

const COLORS = {
  SUCCESS: 0x00FF00,
  ERROR: 0xFF0000,
  PENDING: 0xFFA500,
  ACTIVE: 0x1E90FF,
  PING: 0x32CD32
};

const EMOJIS = {
  SUCCESS: '✅',
  ERROR: '❌',
  QUESTION: '❓',
  OPTIONS: '📋',
  DURATION: '⏱️',
  ID: '🔑',
  ANONYMOUS: '🔒',
  TIME_REMAINING: '⏳',
  TOTAL_VOTES: '📊'
};

const config = {
  token: process.env.TOKEN,
  clientId: process.env.CLIENT_ID,
  pollChannel: null,
  moderatorRole: null,
  pendingPolls: new Map(),
  activePolls: new Map()
};

if (!config.token || !config.clientId) {
  console.error('Error: Missing environment variables!');
  process.exit(1);
}

async function initSettings() {
  try {
    const settings = await db.get('settings') || {};
    config.pollChannel = settings.pollChannel || null;
    config.moderatorRole = settings.moderatorRole || null;
    const activePollsData = settings.activePolls || [];
    config.activePolls = new Map(activePollsData.map(([key, value]) => {
      return [key, { ...value, voters: new Map(value.voters || []) }];
    }));
    console.log('Settings loaded successfully');
  } catch (error) {
    console.error('Error loading settings:', error);
  }
}

async function saveSettings() {
  try {
    const settings = {
      pollChannel: config.pollChannel,
      moderatorRole: config.moderatorRole,
      activePolls: Array.from(config.activePolls.entries()).map(([key, value]) => {
        return [key, { ...value, voters: Array.from(value.voters.entries()) }];
      })
    };
    await db.set('settings', settings);
    return true;
  } catch (error) {
    console.error('Error saving settings:', error);
    return false;
  }
}

const reactionEmojis = ['1️⃣', '2️⃣', '3️⃣', '4️⃣', '5️⃣'];

const commands = [
  new SlashCommandBuilder()
    .setName('ping')
    .setDescription('نمایش وضعیت ربات 🏓'),
  new SlashCommandBuilder()
    .setName('setpollchannel')
    .setDescription('تنظیم کانال نظرسنجی 📍')
    .setDefaultMemberPermissions(PermissionsBitField.Flags.ManageChannels),
  new SlashCommandBuilder()
    .setName('setmoderatorrole')
    .setDescription('تنظیم رول تأییدکننده 🛡️')
    .setDefaultMemberPermissions(PermissionsBitField.Flags.ManageRoles)
    .addRoleOption(option =>
      option.setName('role')
        .setDescription('رول تأییدکننده')
        .setRequired(true)),
  new SlashCommandBuilder()
    .setName('createpoll')
    .setDescription('ساخت نظرسنجی جدید 📝')
    .addStringOption(option =>
      option.setName('question')
        .setDescription('سوال نظرسنجی')
        .setRequired(true)
        .setMaxLength(256))
    .addStringOption(option =>
      option.setName('options')
        .setDescription('گزینه‌ها (با | جدا کنید)')
        .setRequired(true))
    .addIntegerOption(option =>
      option.setName('duration')
        .setDescription('مدت زمان (ساعت)')
        .setMinValue(1)
        .setMaxValue(168))
    .addBooleanOption(option =>
      option.setName('anonymous')
        .setDescription('حالت ناشناس')
        .setRequired(false))
];

async function registerCommands() {
  try {
    const rest = new REST({ version: '10' }).setToken(config.token);
    await rest.put(Routes.applicationCommands(config.clientId), { body: commands });
    console.log('Commands registered successfully');
  } catch (error) {
    console.error('Error registering commands:', error);
  }
}

function startPollChecker() {
  setInterval(async () => {
    for (const [messageId, poll] of config.activePolls.entries()) {
      try {
        if (Date.now() >= poll.endTime) {
          await endPoll(messageId);
        } else {
          const channel = await client.channels.fetch(config.pollChannel);
          const message = await channel.messages.fetch(messageId);
          const embed = message.embeds[0];
          
          const updatedEmbed = new EmbedBuilder(embed.data)
            .spliceFields(2, 1, { 
              name: `${EMOJIS.TIME_REMAINING} **زمان باقیمانده**`, 
              value: `<t:${Math.floor(poll.endTime / 1000)}:R>`, 
              inline: true 
            });
          
          await message.edit({ embeds: [updatedEmbed] });
        }
      } catch (error) {
        console.error('Error updating poll:', error);
      }
    }
  }, 60000);
}

async function endPoll(messageId) {
  const poll = config.activePolls.get(messageId);
  if (!poll) return;

  try {
    const channel = await client.channels.fetch(config.pollChannel);
    const message = await channel.messages.fetch(messageId);
    const reactions = message.reactions.cache;

    const results = poll.options.map((opt, i) => {
      const reaction = reactions.get(reactionEmojis[i]);
      const count = reaction ? reaction.count - 1 : 0;
      return { option: opt, count };
    });

    const totalVotes = results.reduce((sum, r) => sum + r.count, 0);
    const maxVotes = Math.max(...results.map(r => r.count), 1);

    const embed = new EmbedBuilder()
      .setColor(COLORS.ERROR)
      .setTitle('📊 نتایج نظرسنجی')
      .addFields(
        { name: `${EMOJIS.QUESTION} **سوال**`, value: poll.question, inline: false },
        { name: `${EMOJIS.OPTIONS} **نتایج**`, value: results.map((r, i) => {
          const percentage = totalVotes > 0 ? (r.count / totalVotes) * 100 : 0;
          const barLength = Math.round((r.count / maxVotes) * 10);
          const bar = '█'.repeat(barLength) + '▁'.repeat(10 - barLength);
          return `${reactionEmojis[i]} ${r.option}: **${r.count} رأی** (${percentage.toFixed(1)}%)\n${bar}`;
        }).join('\n\n'), inline: false },
        { name: `${EMOJIS.TOTAL_VOTES} **مجموع آرا**`, value: `${totalVotes}`, inline: true },
        { name: `${EMOJIS.ANONYMOUS} **ناشناس**`, value: poll.anonymous ? 'بله ✅' : 'خیر ❌', inline: true }
      )
      .setThumbnail(client.user.displayAvatarURL())
      .setFooter({ text: poll.anonymous ? 'نظرسنجی ناشناس 🔒 | پایان یافت!' : `ایجاد شده توسط ${poll.creatorName} | پایان یافت!` })
      .setTimestamp();

    await channel.send({ embeds: [embed] });
    config.activePolls.delete(messageId);
    await saveSettings();
  } catch (error) {
    console.error('Error in endPoll:', error);
  }
}

client.once('ready', () => {
  console.log(`Bot logged in as ${client.user.tag}`);
  initSettings().then(() => {
    registerCommands();
    startPollChecker();
  });
});

client.on('interactionCreate', async interaction => {
  if (!interaction.isCommand() && !interaction.isButton()) return;

  if (interaction.isCommand()) {
    await interaction.deferReply({ ephemeral: true });

    try {
      switch (interaction.commandName) {
        case 'ping':
          const botPing = client.ws.ping;
          const pingEmbed = new EmbedBuilder()
            .setTitle('🏓 پونگ!')
            .setColor(COLORS.PING)
            .setDescription('وضعیت اتصال ربات رو چک کن! 🚀')
            .addFields(
              { name: '📡 **پینگ ربات**', value: `${botPing}ms`, inline: true }
            )
            .setThumbnail(client.user.displayAvatarURL())
            .setFooter({ text: `درخواست توسط ${interaction.user.tag} | وضعیت: 🟢 آنلاین` })
            .setTimestamp();
          await interaction.editReply({ embeds: [pingEmbed], ephemeral: false });
          break;

        case 'setpollchannel':
          config.pollChannel = interaction.channelId;
          if (await saveSettings()) {
            await interaction.editReply({ content: `${EMOJIS.SUCCESS} **کانال نظرسنجی تنظیم شد** | <#${config.pollChannel}>` });
          } else {
            await interaction.editReply({ content: `${EMOJIS.ERROR} **خطا در تنظیم کانال**` });
          }
          break;

        case 'setmoderatorrole':
          config.moderatorRole = interaction.options.getRole('role').id;
          if (await saveSettings()) {
            await interaction.editReply({ content: `${EMOJIS.SUCCESS} **رول تأییدکننده تنظیم شد** | <@&${config.moderatorRole}>` });
          } else {
            await interaction.editReply({ content: `${EMOJIS.ERROR} **خطا در تنظیم رول**` });
          }
          break;

        case 'createpoll':
          if (!config.pollChannel || !config.moderatorRole) {
            await interaction.editReply({ content: `${EMOJIS.ERROR} **لطفاً ابتدا کانال و رول را تنظیم کنید**` });
            return;
          }

          const pollId = Date.now().toString();
          const poll = {
            question: interaction.options.getString('question'),
            options: interaction.options.getString('options').split('|').map(o => o.trim()),
            duration: (interaction.options.getInteger('duration') || 24) * 3600000,
            creator: interaction.user.id,
            creatorName: interaction.user.username,
            endTime: Date.now() + ((interaction.options.getInteger('duration') || 24) * 3600000),
            anonymous: interaction.options.getBoolean('anonymous') || false,
            voters: new Map()
          };

          if (poll.options.length < 2 || poll.options.length > 5) {
            await interaction.editReply({ content: `${EMOJIS.ERROR} **نظرسنجی باید بین 2 تا 5 گزینه داشته باشد**` });
            return;
          }

          config.pendingPolls.set(pollId, poll);

          const embed = new EmbedBuilder()
            .setTitle(`${poll.anonymous ? '🔒 ' : ''}📊 نظرسنجی در انتظار تأیید`)
            .setColor(COLORS.PENDING)
            .setDescription('لطفاً این نظرسنجی را بررسی و تأیید یا رد کنید! 🚨')
            .addFields(
              { name: `${EMOJIS.QUESTION} **سوال**`, value: poll.question, inline: false },
              { name: `${EMOJIS.OPTIONS} **گزینه‌ها**`, value: poll.options.map((opt, i) => `${reactionEmojis[i]} ${opt}`).join('\n'), inline: false },
              { name: `${EMOJIS.DURATION} **مدت زمان**`, value: `${poll.duration / 3600000} ساعت`, inline: true },
              { name: `${EMOJIS.ANONYMOUS} **ناشناس**`, value: poll.anonymous ? 'بله ✅' : 'خیر ❌', inline: true },
              { name: `${EMOJIS.ID} **شناسه**`, value: pollId, inline: true }
            )
            .setThumbnail(client.user.displayAvatarURL())
            .setFooter({ text: poll.anonymous ? 'نظرسنجی ناشناس 🔒 | در انتظار تأیید' : `ایجاد شده توسط ${poll.creatorName} | در انتظار تأیید` })
            .setTimestamp();

          const actionRow = new ActionRowBuilder()
            .addComponents(
              new ButtonBuilder()
                .setCustomId(`approve_${pollId}`)
                .setLabel('تأیید')
                .setStyle(ButtonStyle.Success)
                .setEmoji('✅'),
              new ButtonBuilder()
                .setCustomId(`reject_${pollId}`)
                .setLabel('رد')
                .setStyle(ButtonStyle.Danger)
                .setEmoji('❌')
            );

          await interaction.editReply({ content: `${EMOJIS.SUCCESS} **نظرسنجی شما ایجاد و در انتظار تأیید است**` });
          const message = await interaction.channel.send({ 
            content: `<@&${config.moderatorRole}> یک نظرسنجی جدید نیاز به تأیید دارد! 🚨`,
            embeds: [embed],
            components: [actionRow]
          });

          for (const emoji of reactionEmojis.slice(0, poll.options.length)) {
            await message.react(emoji);
          }
          break;
      }
    } catch (error) {
      console.error('Error in command:', error);
      await interaction.editReply({ content: `${EMOJIS.ERROR} **خطایی رخ داد**` }).catch(console.error);
    }
  } else if (interaction.isButton()) {
    if (!interaction.member.roles.cache.has(config.moderatorRole)) {
      await interaction.reply({ content: `${EMOJIS.ERROR} **شما دسترسی لازم برای این کار را ندارید**`, ephemeral: true });
      return;
    }

    const [action, pollId] = interaction.customId.split('_');
    const poll = config.pendingPolls.get(pollId);
    if (!poll) {
      await interaction.update({ 
        content: `${EMOJIS.ERROR} **نظرسنجی مورد نظر یافت نشد**`, 
        embeds: [], 
        components: [] 
      });
      return;
    }

    if (action === 'approve') {
      const channel = await client.channels.fetch(config.pollChannel);
      const pollEmbed = new EmbedBuilder()
        .setTitle(`${poll.anonymous ? '🔒 ' : ''}📊 نظرسنجی فعال`)
        .setColor(COLORS.ACTIVE)
        .addFields(
          { name: `${EMOJIS.QUESTION} **سوال**`, value: poll.question, inline: false },
          { name: `${EMOJIS.OPTIONS} **گزینه‌ها**`, value: poll.options.map((opt, i) => `${reactionEmojis[i]} ${opt}`).join('\n'), inline: false },
          { name: `${EMOJIS.TIME_REMAINING} **زمان باقیمانده**`, value: `<t:${Math.floor(poll.endTime / 1000)}:R>`, inline: true },
          { name: `${EMOJIS.ANONYMOUS} **ناشناس**`, value: poll.anonymous ? 'بله ✅' : 'خیر ❌', inline: true }
        )
        .setThumbnail(client.user.displayAvatarURL())
        .setFooter({ text: poll.anonymous ? 'نظرسنجی ناشناس 🔒 | فعال' : `ایجاد شده توسط ${poll.creatorName} | فعال` })
        .setTimestamp();

      const msg = await channel.send({ embeds: [pollEmbed] });
      for (const emoji of reactionEmojis.slice(0, poll.options.length)) {
        await msg.react(emoji);
      }

      config.activePolls.set(msg.id, poll);
      config.pendingPolls.delete(pollId);
      await saveSettings();

      const updatedEmbed = new EmbedBuilder()
        .setTitle('✅ نظرسنجی تأیید شد')
        .setColor(COLORS.SUCCESS)
        .setDescription(`این نظرسنجی توسط <@${interaction.user.id}> تأیید شد و در <#${config.pollChannel}> منتشر شد.`)
        .setTimestamp();

      await interaction.update({ 
        content: null, 
        embeds: [updatedEmbed], 
        components: [] 
      });
    } else if (action === 'reject') {
      config.pendingPolls.delete(pollId);
      const updatedEmbed = new EmbedBuilder()
        .setTitle('❌ نظرسنجی رد شد')
        .setColor(COLORS.ERROR)
        .setDescription(`این نظرسنجی توسط <@${interaction.user.id}> رد شد.`)
        .setTimestamp();

      await interaction.update({ 
        content: null, 
        embeds: [updatedEmbed], 
        components: [] 
      });
    }
  }
});

client.on('messageReactionAdd', async (reaction, user) => {
  if (user.bot) return;

  const poll = config.activePolls.get(reaction.message.id);
  if (!poll) return;

  const emoji = reaction.emoji.name;
  const validIndex = reactionEmojis.indexOf(emoji);

  if (validIndex === -1 || validIndex >= poll.options.length) {
    await reaction.users.remove(user);
    return;
  }

  if (poll.voters.has(user.id)) {
    await reaction.users.remove(user);
    await reaction.message.channel.send({ content: `<@${user.id}> ${EMOJIS.ERROR} **شما قبلاً رأی داده‌اید**` });
    return;
  }

  poll.voters.set(user.id, validIndex);
});

client.on('messageReactionRemove', async (reaction, user) => {
  if (user.bot) return;

  const poll = config.activePolls.get(reaction.message.id);
  if (!poll) return;

  const emoji = reaction.emoji.name;
  const validIndex = reactionEmojis.indexOf(emoji);

  if (validIndex === -1 || validIndex >= poll.options.length) return;

  if (poll.voters.get(user.id) === validIndex) {
    poll.voters.delete(user.id);
  }
});

client.login(config.token).catch(console.error);
🚀 نتیجه نهایی
با این تغییرات:

کامندهای /approvepoll و /rejectpoll حذف شدن.
دکمه‌های "تأیید" و "رد" زیر پیام نظرسنجی در انتظار تأیید قرار دارن و مدیران می‌تونن با یه کلیک نظرسنجی رو تأیید یا رد کنن.
بعد از کلیک روی دکمه:
اگه تأیید بشه، نظرسنجی توی کانال نظرسنجی منتشر می‌شه و پیام اصلی به "نظرسنجی تأیید شد" آپدیت می‌شه.
اگه رد بشه، پیام اصلی به "نظرسنجی رد شد" آپدیت می‌شه.
دکمه‌ها غیرفعال می‌شن تا از کلیک دوباره جلوگیری بشه.
فقط کسایی که رول moderatorRole رو دارن می‌تونن از دکمه‌ها استفاده کنن.
این کد رو توی Replit اجرا کن، باید همه‌چیز خیلی روان و کاربرپسند کار کنه. اگه بازم می‌خوای تغییر یا قابلیت جدیدی اضافه کنی، بگو تا برات درست کنم! 😊

موفق باشی! 🌟